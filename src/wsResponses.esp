void ICACHE_FLASH_ATTR sendUserList(int page, AsyncWebSocketClient *client)
{
	//DynamicJsonDocument root(1024);
	JsonDocument root;
	root["command"] = "userlist";
	root["page"] = page;
	JsonArray users = root.createNestedArray("list");
	
	File dir = LittleFS.open("/P");
	File file = dir.openNextFile();

	int first = (page - 1) * 10;
	int last = page * 10;
	int i = 0;

#ifdef DEBUG
		Serial.println(F("[ INFO ] Getting Userlist..."));
#endif

	while (file)
	{
		if (i >= first && i < last)
		{
			JsonObject item = users.createNestedObject();
			String uid = file.name();
			//uid.remove(0, 3);
			item["uid"] = uid;
			File f = LittleFS.open("/P/"+uid, "r");
			size_t size = f.size();
			std::unique_ptr<char[]> buf(new char[size]);
			f.readBytes(buf.get(), size);
#ifdef DEBUG
		Serial.print(F("[ INFO ] User File Name: "));
		Serial.println(uid);
		Serial.print(F("[ INFO ] User File Size: "));
		Serial.println(file.size());
		Serial.print(F("[ INFO ] User File "));
#endif
			//DynamicJsonDocument json(512);
			JsonDocument json;
			auto error = deserializeJson(json, buf.get(), size);
			if (!error)
			{
				String username = json["user"];
				String pincode = "";
				if(json.containsKey("pincode"))
				{
					pincode = String((const char*)json["pincode"]);
				}
				int picctype = config.wiegandbits;
				if(json.containsKey("picctype"))
				{
					picctype = json["picctype"];
				}
				for (int x = 1; x <= MAX_NUM_RELAYS; x++)
				{
					String theKey = String();
					if (x == 1)
						theKey = "acctype";
					else
						theKey = "acctype" + String(x);
					int AccType = json[theKey];
					item[theKey] = AccType;
				}
				unsigned long validsince = json.containsKey("validsince") ? json["validsince"] : 0;
				unsigned long validuntil = json["validuntil"];
				item["username"] = username;
				item["validsince"] = validsince;
				item["validuntil"] = validuntil;
				item["pincode"] = pincode;
				item["picctype"] = picctype;
#ifdef DEBUG
		Serial.println(F(" OK"));
#endif
			} else 
			{
#ifdef DEBUG
		Serial.println(F(" FAIL"));
#endif
			}
		}
		i++;
		file = dir.openNextFile();
		yield();
	}

	float pages = i / 10.0;
	root["haspages"] = ceil(pages);
	size_t len = measureJson(root);
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer)
	{
		serializeJson(root, (char *)buffer->get(), len + 1);
		if (client)
		{
			//wsMessageTicker.once_ms_scheduled(50, [client, buffer]() {
				client->text(buffer);
				client->text("{\"command\":\"result\",\"resultof\":\"userlist\",\"result\": true}");
			//});
		}
		else
		{
			ws.textAll("{\"command\":\"result\",\"resultof\":\"userlist\",\"result\": false}");
		}
	}
}

void ICACHE_FLASH_ATTR sendStatus(AsyncWebSocketClient *client)
{
	//struct ip_info info;
	if (!LittleFS.totalBytes())
	{
#ifdef DEBUG
		Serial.print(F("[ WARN ] Error getting info on LittleFS"));
#endif
	}
	//DynamicJsonDocument root(512);
	JsonDocument root;
	root["command"] = "status";

	bool ethernet = false;
#ifdef ETHERNET
	ethernet = true;
#endif
	root["ethernet"] = ethernet;
	root["heap"] = ESP.getFreeHeap();
	root["heapsize"] = ESP.getHeapSize();
	uint32_t chipID = 0;
	for (int i = 0; i < 17; i = i + 8) {
    	chipID |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
  	}
	root["chipid"] = chipID;
	root["cpu"] = ESP.getCpuFreqMHz();
	root["cpumodel"] = ESP.getChipModel();
	root["cpurev"] = ESP.getChipCores();
	root["cpucores"] = ESP.getChipCores();
	root["sketchsize"] = ESP.getSketchSize();
	root["availsize"] = ESP.getFreeSketchSpace();
	root["availlittlefs"] = LittleFS.totalBytes() - LittleFS.usedBytes();
	root["littlefssize"] = LittleFS.totalBytes();
	
  	int h = uptimeSeconds / 3600;
  	int rem = uptimeSeconds % 3600;
  	int m = rem / 60;
  	int s = rem % 60;
	char uptimebuffer[9];
	sprintf(uptimebuffer, "%02d:%02d:%02d", h, m, s);

	root["uptime"] = uptimebuffer;
	root["version"] = VERSION;
	root["hostname"] = WiFi.getHostname();

	String debugver = "";
#ifdef DEBUG
	debugver = "debug";
#endif
#ifdef ETHERNET
	debugver = "eth";
#endif
	root["debugver"] = debugver;

	if (config.accessPointMode)
	{
		root["ssid"] = WiFi.softAPSSID();
		root["dns"] = printIP(WiFi.softAPIP());
		root["mac"] = WiFi.softAPmacAddress();
	}
	else
	{
		root["ssid"] = WiFi.SSID();
		float RssI = WiFi.RSSI();
  		RssI = isnan(RssI) ? -100.0 : RssI;
  		RssI = min(max(2 * (RssI + 100.0), 0.0), 100.0);
		char rssibuffer[9];
		sprintf(rssibuffer, "%.0f", RssI);
		root["rssi"] = String(WiFi.RSSI()) + "dBm" + " (" + rssibuffer + "%)";
		root["rssiperc"] = String(RssI);
		root["dns"] = printIP(WiFi.dnsIP());
		root["mac"] = WiFi.macAddress();
	}

	IPAddress ipaddr = WiFi.localIP();
	IPAddress gwaddr = WiFi.gatewayIP();
	IPAddress nmaddr = WiFi.subnetMask();

	root["ip"] = printIP(ipaddr);
	root["gateway"] = printIP(gwaddr);
	root["netmask"] = printIP(nmaddr);

	size_t len = measureJson(root);
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer)
	{
		serializeJson(root, (char *)buffer->get(), len + 1);
		if (client)
		{
			client->text(buffer);
		}
		else
		{
			ws.textAll(buffer);
		}
	}
}

void ICACHE_FLASH_ATTR printScanResult(int networksFound)
{
	// sort by RSSI
	int n = networksFound;
	int indices[n];
	int skip[n];
	for (int i = 0; i < networksFound; i++)
	{
		indices[i] = i;
	}
	for (int i = 0; i < networksFound; i++)
	{
		for (int j = i + 1; j < networksFound; j++)
		{
			if (WiFi.RSSI(indices[j]) > WiFi.RSSI(indices[i]))
			{
				std::swap(indices[i], indices[j]);
				std::swap(skip[i], skip[j]);
			}
		}
	}

	//DynamicJsonDocument root(1024);
	JsonDocument root;
	root["command"] = "ssidlist";
	JsonArray scan = root.createNestedArray("list");
	for (int i = 0; i < 5 && i < networksFound; ++i)
	{
		JsonObject item = scan.createNestedObject();

		item["ssid"] = WiFi.SSID(indices[i]);
		item["bssid"] = WiFi.BSSIDstr(indices[i]);
		item["rssi"] = WiFi.RSSI(indices[i]);
		item["channel"] = WiFi.channel(indices[i]);
		item["enctype"] = WiFi.encryptionType(i);
		item["hidden"] = false; //WiFi.isHidden(indices[i]) ? true : false;
	}
	size_t len = measureJson(root);
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len); //  creates a buffer (len + 1) for you.
	if (buffer)
	{
		serializeJson(root, (char *)buffer->get(), len + 1);
		ws.textAll(buffer);
	}
	WiFi.scanDelete();
}

void ICACHE_FLASH_ATTR sendTime(AsyncWebSocketClient *client)
{
	//DynamicJsonDocument root(512);
	JsonDocument root;
	root["command"] = "gettime";
	root["epoch"] = epoch;
	size_t len = measureJson(root);
	AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
	if (buffer)
	{
		serializeJson(root, (char *)buffer->get(), len + 1);
		if (client)
		{
			client->text(buffer);
		}
		else
		{
			ws.textAll(buffer);
		}
	}
}
